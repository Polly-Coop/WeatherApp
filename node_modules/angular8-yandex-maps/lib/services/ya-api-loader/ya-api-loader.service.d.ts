import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { YaConfig } from '../../interfaces/ya-config';
import * as i0 from "@angular/core";
/**
 * The `YaApiLoader` service handles loading of Yandex.Maps API. Use it if you do not need `YaMapComponent`.
 *
 * Starting from `v16.1.0` the service supports dynamic configuration changes by subscribing on a `YaConfig` observable.
 * It stores global API objects in a local cache, and updates them in runtime if necessary.
 * That's why do not provide this service, it will break the synchronizations between the local cache and HTML scripts.
 *
 * ```ts
 * import { YaApiLoaderService } from 'angular8-yandex-maps';
 *
 * @Component()
 * export class AppComponent {
 *   constructor(private yaApiLoaderService: YaApiLoaderService) {
 *     // Don't forget to unsubscribe
 *     this.yaApiLoaderService.load()
 *       .subscribe(v => console.log(v))
 *   }
 * }
 *```
 */
export declare class YaApiLoaderService {
    private readonly document;
    private readonly ngZone;
    private readonly isBrowser;
    private readonly defaultConfig;
    private readonly config$;
    private readonly cache;
    constructor(config: YaConfig | Observable<YaConfig>, document: Document, platformId: object, ngZone: NgZone);
    /**
     * Loads Yandex.Maps API.
     */
    load(): Observable<typeof ymaps>;
    private createScript;
    /**
     * Returns a script source from a config.
     * @param config parameters to add to a source
     * @example
     * // returns 'https://api-maps.yandex.ru/2.1/?apikey=658f67a2-fd77-42e9-b99e-2bd48c4ccad4&lang=en_US'
     * getScriptSource({ apikey: '658f67a2-fd77-42e9-b99e-2bd48c4ccad4', lang: 'en_US' })
     */
    private getScriptSource;
    /**
     * Converts a config into query string parameters.
     * @param config object to convert
     * @example
     * // returns "lang=ru_RU&apikey=XXX"
     * convertIntoQueryParams({ lang: 'ru_RU', apikey: 'XXX' })
     */
    private convertConfigIntoQueryParams;
    static ɵfac: i0.ɵɵFactoryDeclaration<YaApiLoaderService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<YaApiLoaderService>;
}
