import { ModuleWithProviders } from '@angular/core';
import { Observable } from 'rxjs';
import { YaConfig } from './interfaces/ya-config';
import * as i0 from "@angular/core";
import * as i1 from "./components/ya-clusterer/ya-clusterer.component";
import * as i2 from "./components/ya-control/ya-control.directive";
import * as i3 from "./components/ya-geoobject/ya-geoobject.directive";
import * as i4 from "./components/ya-map/ya-map.component";
import * as i5 from "./components/ya-multiroute/ya-multiroute.directive";
import * as i6 from "./components/ya-object-manager/ya-object-manager.directive";
import * as i7 from "./components/ya-panorama/ya-panorama.directive";
import * as i8 from "./components/ya-placemark/ya-placemark.directive";
export declare class AngularYandexMapsModule {
    /**
     * Please use this method when registering the module at the root level.
     * If used in a lazy-loaded module, YaApiLoaderService will not take the provided configuration.
     * @param config configuration for YaApiLoaderService
     */
    static forRoot(config: YaConfig | Observable<YaConfig>): ModuleWithProviders<AngularYandexMapsModule>;
    static ɵfac: i0.ɵɵFactoryDeclaration<AngularYandexMapsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<AngularYandexMapsModule, [typeof i1.YaClustererComponent, typeof i2.YaControlDirective, typeof i3.YaGeoObjectDirective, typeof i4.YaMapComponent, typeof i5.YaMultirouteDirective, typeof i6.YaObjectManagerDirective, typeof i7.YaPanoramaDirective, typeof i8.YaPlacemarkDirective], never, [typeof i1.YaClustererComponent, typeof i2.YaControlDirective, typeof i3.YaGeoObjectDirective, typeof i4.YaMapComponent, typeof i5.YaMultirouteDirective, typeof i6.YaObjectManagerDirective, typeof i7.YaPanoramaDirective, typeof i8.YaPlacemarkDirective]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<AngularYandexMapsModule>;
}
