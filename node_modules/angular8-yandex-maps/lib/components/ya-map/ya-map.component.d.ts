import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { YaEvent } from '../../interfaces/ya-event';
import { YaReadyEvent } from '../../interfaces/ya-ready-event';
import { YaApiLoaderService } from '../../services/ya-api-loader/ya-api-loader.service';
import * as i0 from "@angular/core";
/**
 * The `ya-map` component wraps `ymaps.Map` class from the Yandex.Maps API.
 * You can configure the map via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/map-onload-event?embed=1&view=preview</example-url>
 *
 * ```html
 * <ya-map
 *   [center]="[55.751952, 37.600739]"
 *   [state]="{type: 'yandex#satellite'}"
 * ></ya-map>
 * ```
 */
export declare class YaMapComponent implements AfterViewInit, OnChanges, OnDestroy {
    private readonly ngZone;
    private readonly yaApiLoaderService;
    readonly container: ElementRef;
    private readonly destroy$;
    private readonly eventManager;
    map$: BehaviorSubject<ymaps.Map | null>;
    /**
     * Geo coordinates of the map center. Default is `[0, 0]`.
     * Shorthand for `[state]="{ center: [0, 0] }"`.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Map__param-state.center}
     */
    center: number[];
    /**
     * Map zoom level. Default level is `10`.
     * Shorthand for `[state]="{ zoom: 10 }"`.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Map__param-state.zoom}
     */
    zoom: number;
    /**
     * Map parameters.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Map__param-state}
     */
    state?: ymaps.IMapState;
    /**
     * Map options. The map options can be used to make settings for the map itself, as well as for objects that are added to it.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Map__param-options}
     */
    options?: ymaps.IMapOptions;
    /**
     * Map instance is created. This event runs outside an Angular zone.
     */
    ready: EventEmitter<YaReadyEvent<ymaps.Map>>;
    /**
     * The start of a new smooth map movement.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actionbegin}
     */
    actionbegin: Observable<YaEvent<ymaps.Map>>;
    /**
     * Event that occurs when an action step was prematurely stopped.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actionbreak}
     */
    actionbreak: Observable<YaEvent<ymaps.Map>>;
    /**
     * The end of smooth map movement.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actionend}
     */
    actionend: Observable<YaEvent<ymaps.Map>>;
    /**
     * The start of a new step of smooth movement.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actiontick}
     */
    actiontick: Observable<YaEvent<ymaps.Map>>;
    /**
     * The end of performing a step of smooth movement.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actiontickcomplete}
     */
    actiontickcomplete: Observable<YaEvent<ymaps.Map>>;
    /**
     * Closing the balloon.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-balloonclose}
     */
    balloonclose: Observable<YaEvent<ymaps.Map>>;
    /**
     * Opening a balloon on a map.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-balloonopen}
     */
    balloonopen: Observable<YaEvent<ymaps.Map>>;
    /**
     * Event for a change to the map viewport.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-boundschange}
     */
    boundschange: Observable<YaEvent<ymaps.Map>>;
    /**
     * Single left-click on the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-click}
     */
    yaclick: Observable<YaEvent<ymaps.Map>>;
    /**
     * Calls the element's context menu.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-contextmenu}
     */
    yacontextmenu: Observable<YaEvent<ymaps.Map>>;
    /**
     * Double left-click on the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-dblclick}
     */
    yadblclick: Observable<YaEvent<ymaps.Map>>;
    /**
     * The map was destroyed.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-destroy}
     */
    destroy: Observable<YaEvent<ymaps.Map>>;
    /**
     * Closing the hint.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-hintclose}
     */
    hintclose: Observable<YaEvent<ymaps.Map>>;
    /**
     * Opening a hint on a map.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-hintopen}
     */
    hintopen: Observable<YaEvent<ymaps.Map>>;
    /**
     * Map margins changed.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-marginchange}
     */
    marginchange: Observable<YaEvent<ymaps.Map>>;
    /**
     * Pressing the mouse button over the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousedown}
     */
    yamousedown: Observable<YaEvent<ymaps.Map>>;
    /**
     * Pointing the cursor at the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseenter}
     */
    yamouseenter: Observable<YaEvent<ymaps.Map>>;
    /**
     * Moving the cursor off of the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseleave}
     */
    yamouseleave: Observable<YaEvent<ymaps.Map>>;
    /**
     * Moving the cursor over the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousemove}
     */
    yamousemove: Observable<YaEvent<ymaps.Map>>;
    /**
     * Letting go of the mouse button over an object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseup}
     */
    yamouseup: Observable<YaEvent<ymaps.Map>>;
    /**
     * End of multitouch.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchend}
     */
    multitouchend: Observable<YaEvent<ymaps.Map>>;
    /**
     * Repeating event during multitouch.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchmove}
     */
    multitouchmove: Observable<YaEvent<ymaps.Map>>;
    /**
     * Start of multitouch.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchstart}
     */
    multitouchstart: Observable<YaEvent<ymaps.Map>>;
    /**
     * Map options changed.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-optionschange}
     */
    optionschange: Observable<YaEvent<ymaps.Map>>;
    /**
     * Map size changed.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-sizechange}
     */
    sizechange: Observable<YaEvent<ymaps.Map>>;
    /**
     * The map type changed.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-typechange}
     */
    typechange: Observable<YaEvent<ymaps.Map>>;
    /**
     * Mouse wheel scrolling.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-wheel}
     */
    yawheel: Observable<YaEvent<ymaps.Map>>;
    constructor(ngZone: NgZone, yaApiLoaderService: YaApiLoaderService);
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Destructs state and passes it in API.
     * @param state
     * @param map
     */
    private setState;
    /**
     * Creates a map.
     * @param id ID which will be set to the map container.
     */
    private createMap;
    /**
     * Combines the center and zoom into single object.
     */
    private combineState;
    static ɵfac: i0.ɵɵFactoryDeclaration<YaMapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<YaMapComponent, "ya-map", never, { "center": { "alias": "center"; "required": false; }; "zoom": { "alias": "zoom"; "required": false; }; "state": { "alias": "state"; "required": false; }; "options": { "alias": "options"; "required": false; }; }, { "ready": "ready"; "actionbegin": "actionbegin"; "actionbreak": "actionbreak"; "actionend": "actionend"; "actiontick": "actiontick"; "actiontickcomplete": "actiontickcomplete"; "balloonclose": "balloonclose"; "balloonopen": "balloonopen"; "boundschange": "boundschange"; "yaclick": "yaclick"; "yacontextmenu": "yacontextmenu"; "yadblclick": "yadblclick"; "destroy": "destroy"; "hintclose": "hintclose"; "hintopen": "hintopen"; "marginchange": "marginchange"; "yamousedown": "yamousedown"; "yamouseenter": "yamouseenter"; "yamouseleave": "yamouseleave"; "yamousemove": "yamousemove"; "yamouseup": "yamouseup"; "multitouchend": "multitouchend"; "multitouchmove": "multitouchmove"; "multitouchstart": "multitouchstart"; "optionschange": "optionschange"; "sizechange": "sizechange"; "typechange": "typechange"; "yawheel": "yawheel"; }, never, never, false, never>;
}
