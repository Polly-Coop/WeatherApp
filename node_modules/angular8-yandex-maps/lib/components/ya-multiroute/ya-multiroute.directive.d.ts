import { EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { YaEvent } from '../../interfaces/ya-event';
import { YaReadyEvent } from '../../interfaces/ya-ready-event';
import { YaMapComponent } from '../ya-map/ya-map.component';
import * as i0 from "@angular/core";
/**
 * @internal
 */
type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;
/**
 * The `ya-multiroute` component wraps `ymaps.multiRouter.MultiRoute` class from the Yandex.Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-multiroute
 *     [referencePoints]="[[55.751952, 37.600739], 'Красные ворота, Москва']"
 *     [models]="{ params: { routingMode: 'pedestrian' } }"
 *   ></ya-multiroute>
 * </ya-map>
 * ```
 */
export declare class YaMultirouteDirective implements OnInit, OnChanges, OnDestroy {
    private readonly ngZone;
    private readonly yaMapComponent;
    private readonly destroy$;
    private readonly eventManager;
    private multiroute?;
    /**
     * Multi-route reference points.
     * Shorthand for `[models]="{ referencePoints: [0, 0] }"`.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IMultiRouteReferencePoint.html}
     */
    referencePoints: ymaps.IMultiRouteReferencePoint[];
    /**
     * The data model of a multi-route, or the model description object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#multiRouter.MultiRoute__param-model}
     */
    model?: ymaps.multiRouter.MultiRouteModel | Optional<ymaps.IMultiRouteModelJson, 'referencePoints'>;
    /**
     * Multi-route options.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#multiRouter.MultiRoute__param-options}
     */
    options?: ymaps.multiRouter.IMultiRouteOptions;
    /**
     * Multi-route instance is added to a Map. This event runs outside an Angular zone.
     */
    ready: EventEmitter<YaReadyEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Change to the active route.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-activeroutechange}
     */
    activeroutechange: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Closing the balloon.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-balloonclose}
     */
    balloonclose: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Opening the balloon.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-balloonopen}
     */
    balloonopen: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * The event occurs at the time of setting the map center and its zoom level for optimal display of the multi-route.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-boundsautoapply}
     */
    boundsautoapply: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Changing coordinates of the geographical area covering the multi-route.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-boundschange}
     */
    boundschange: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Single left-click on the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-click}
     */
    yaclick: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Calls the element's context menu.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-contextmenu}
     */
    yacontextmenu: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Double left-click on the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-dblclick}
     */
    yadblclick: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Change to the geo object geometry.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IGeoObject.html#event_detail__event-geometrychange}
     */
    geometrychange: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Map reference changed.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IParentOnMap.html#event_detail__event-mapchange}
     */
    mapchange: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Pressing the mouse button over the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousedown}
     */
    yamousedown: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Pointing the cursor at the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseenter}
     */
    yamouseenter: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Moving the cursor off of the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseleave}
     */
    yamouseleave: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Moving the cursor over the object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousemove}
     */
    yamousemove: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Letting go of the mouse button over an object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseup}
     */
    yamouseup: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * End of multitouch.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchend}
     */
    multitouchend: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Repeating event during multitouch.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchmove}
     */
    multitouchmove: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Start of multitouch.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchstart}
     */
    multitouchstart: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Change to the object options.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/ICustomizable.html#event_detail__event-optionschange}
     */
    optionschange: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Change to the geo object overlay.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IGeoObject.html#event_detail__event-overlaychange}
     */
    overlaychange: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * The parent object reference changed.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IChild.html#event_detail__event-parentchange}
     */
    parentchange: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Changing pixel coordinates of the area covering the multi-route.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-pixelboundschange}
     */
    pixelboundschange: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Change to the geo object data.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IGeoObject.html#event_detail__event-propertieschange}
     */
    propertieschange: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Updating the multi-route.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-update}
     */
    update: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    /**
     * Mouse wheel scrolling.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-wheel}
     */
    yawheel: Observable<YaEvent<ymaps.multiRouter.MultiRoute>>;
    constructor(ngZone: NgZone, yaMapComponent: YaMapComponent);
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Destructs state and passes them in API.
     * @param model
     * @param multiroute
     */
    private setModel;
    /**
     * Creates Multiroute.
     */
    private createMultiroute;
    /**
     * Combines the models and reference points into single object
     */
    private combineModel;
    static ɵfac: i0.ɵɵFactoryDeclaration<YaMultirouteDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<YaMultirouteDirective, "ya-multiroute", never, { "referencePoints": { "alias": "referencePoints"; "required": false; }; "model": { "alias": "model"; "required": false; }; "options": { "alias": "options"; "required": false; }; }, { "ready": "ready"; "activeroutechange": "activeroutechange"; "balloonclose": "balloonclose"; "balloonopen": "balloonopen"; "boundsautoapply": "boundsautoapply"; "boundschange": "boundschange"; "yaclick": "yaclick"; "yacontextmenu": "yacontextmenu"; "yadblclick": "yadblclick"; "geometrychange": "geometrychange"; "mapchange": "mapchange"; "yamousedown": "yamousedown"; "yamouseenter": "yamouseenter"; "yamouseleave": "yamouseleave"; "yamousemove": "yamousemove"; "yamouseup": "yamouseup"; "multitouchend": "multitouchend"; "multitouchmove": "multitouchmove"; "multitouchstart": "multitouchstart"; "optionschange": "optionschange"; "overlaychange": "overlaychange"; "parentchange": "parentchange"; "pixelboundschange": "pixelboundschange"; "propertieschange": "propertieschange"; "update": "update"; "yawheel": "yawheel"; }, never, never, false, never>;
}
export {};
